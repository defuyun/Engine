template<> std::unordered_map<shaderIndexWrapper, std::shared_ptr<GLint>> & getStorage<GLint>() {
	return unii;
}
template<> std::unordered_map<shaderIndexWrapper, std::shared_ptr<glm::vec4>> & getStorage<glm::vec4>() {
	return univ4;
}
template<> std::unordered_map<shaderIndexWrapper, std::shared_ptr<glm::mat4>> & getStorage<glm::mat4>() {
	return unim4;
}
template<> std::unordered_map<shaderIndexWrapper, std::shared_ptr<glm::vec3>> & getStorage<glm::vec3>() {
	return univ3;
}
template<> std::unordered_map<shaderIndexWrapper, std::shared_ptr<glm::mat3>> & getStorage<glm::mat3>() {
	return unim3;
}
template<> std::unordered_map<shaderIndexWrapper, std::shared_ptr<glm::vec2>> & getStorage<glm::vec2>() {
	return univ2;
}
template<> std::unordered_map<shaderIndexWrapper, std::shared_ptr<glm::mat2>> & getStorage<glm::mat2>() {
	return unim2;
}
template<> std::unordered_map<shaderIndexWrapper, std::shared_ptr<GLfloat>> & getStorage<GLfloat>() {
	return unif;
}
void use(GLuint shaderID, const shaderIndexWrapper & si) {
	if (si.type_ == VEC4 ) {
		glm::vec4& t = *(this->get<glm::vec4>(si).lock());
		glUniform4f(glGetUniformLocation(shaderID,si.loc_.c_str()), t.x, t.y, t.z, t.w);
	}
	else if (si.type_ == MAT4 ) {
		glm::mat4& t = *(this->get<glm::mat4>(si).lock());
		glUniformMatrix4fv(glGetUniformLocation(shaderID,si.loc_.c_str()), 1, GL_FALSE, glm::value_ptr(t));
	}
	else if (si.type_ == VEC3 ) {
		glm::vec3& t = *(this->get<glm::vec3>(si).lock());
		glUniform3f(glGetUniformLocation(shaderID,si.loc_.c_str()), t.x, t.y, t.z);
	}
	else if (si.type_ == MAT3 ) {
		glm::mat3& t = *(this->get<glm::mat3>(si).lock());
		glUniformMatrix3fv(glGetUniformLocation(shaderID,si.loc_.c_str()), 1, GL_FALSE, glm::value_ptr(t));
	}
	else if (si.type_ == VEC2 ) {
		glm::vec2& t = *(this->get<glm::vec2>(si).lock());
		glUniform2f(glGetUniformLocation(shaderID,si.loc_.c_str()), t.x, t.y);
	}
	else if (si.type_ == MAT2 ) {
		glm::mat2& t = *(this->get<glm::mat2>(si).lock());
		glUniformMatrix2fv(glGetUniformLocation(shaderID,si.loc_.c_str()), 1, GL_FALSE, glm::value_ptr(t));
	}
	else if (si.type_ == GFLT ) {
		GLfloat& t = *(this->get<GLfloat>(si).lock());
		glUniform1f(glGetUniformLocation(shaderID,si.loc_.c_str()), t);
	}
	else if (si.type_ == GINT ) {
		GLint& t = *(this->get<GLint>(si).lock());
		glUniform1i(glGetUniformLocation(shaderID,si.loc_.c_str()), t);
	}
	else if (si.type_ == TEX2 ) {
		GLint& t = *(this->get<GLint>(si).lock());
		glUniform1i(glGetUniformLocation(shaderID,si.loc_.c_str()), t);
	}
}
bool sanityCheck(const shaderIndexWrapper & si) {
	if (si.type_ == VEC4 ) {
		return getStorage<glm::vec4>().find(si) != getStorage<glm::vec4>().end();
	}
	else if (si.type_ == MAT4 ) {
		return getStorage<glm::mat4>().find(si) != getStorage<glm::mat4>().end();
	}
	else if (si.type_ == VEC3 ) {
		return getStorage<glm::vec3>().find(si) != getStorage<glm::vec3>().end();
	}
	else if (si.type_ == MAT3 ) {
		return getStorage<glm::mat3>().find(si) != getStorage<glm::mat3>().end();
	}
	else if (si.type_ == VEC2 ) {
		return getStorage<glm::vec2>().find(si) != getStorage<glm::vec2>().end();
	}
	else if (si.type_ == MAT2 ) {
		return getStorage<glm::mat2>().find(si) != getStorage<glm::mat2>().end();
	}
	else if (si.type_ == GFLT ) {
		return getStorage<GLfloat>().find(si) != getStorage<GLfloat>().end();
	}
	else if (si.type_ == GINT ) {
		return getStorage<GLint>().find(si) != getStorage<GLint>().end();
	}
	else if (si.type_ == TEX2 ) {
		return getStorage<GLint>().find(si) != getStorage<GLint>().end();
	}
}
